from collections import deque

def solve_water_jug_problem(jug1_capacity, jug2_capacity, target_volume):
    initial_state = (0, 0)
    visited = set()
    queue = deque([(initial_state, [])])

    while queue:
        (jug1, jug2), path = queue.popleft()

        if jug1 == target_volume or jug2 == target_volume:
            if jug1 == target_volume:
                print("Jug 1 now has", target_volume, "liters.")
            else:
                print("Jug 2 now has", target_volume, "liters.")
            print("Solution found!")
            return

        operations = [
            ("Fill Jug 1", jug1_capacity, jug2),
            ("Fill Jug 2", jug1, jug2_capacity),
            ("Empty Jug 1", 0, jug2),
            ("Empty Jug 2", jug1, 0),
            ("Pour Jug 1 to Jug 2", 
                max(0, jug1 + jug2 - jug2_capacity), 
                min(jug2_capacity, jug1 + jug2)),
            ("Pour Jug 2 to Jug 1", 
                min(jug1_capacity, jug1 + jug2), 
                max(0, jug1 + jug2 - jug1_capacity))
        ]

        for action, new_jug1, new_jug2 in operations:
            new_state = (new_jug1, new_jug2)
            if new_state not in visited:
                visited.add(new_state)
                print(f"Trying: {action} => ({new_jug1}, {new_jug2})")
                queue.append((new_state, path + [action]))

    print("Solution not possible.")

# Example usage:
jug1_capacity = int(input("Enter Jug 1 capacity : "))
jug2_capacity = int(input("Enter Jug 2 capacity : "))
target_volume = int(input("Enter Target Volume : "))
print(f"Solving Water Jug Problem with capacities ({jug1_capacity}, {jug2_capacity}) to measure {target_volume} liters.")
solve_water_jug_problem(jug1_capacity, jug2_capacity, target_volume)

